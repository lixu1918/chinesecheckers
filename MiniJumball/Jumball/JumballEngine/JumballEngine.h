//
//  JumballEngine.h
//  Jumball
//
//  Created by Li Xu on 10/6/12.
//  Copyright (c) 2012 Li Xu. All rights reserved.
//

/* 跳棋的视图棋盘及坐标
 .
 r08                         D
 .                          / \
 r07                       +---+
 .                        / \ / \
 r06                     +---+---+
 .                      / \ / \ / \
 r05                   +---+---+---+
 .                    / \ / \ / \ / \
 r04 E---+---+---+---d---+---+---+---c---+---+---+---C
 .    \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ /
 r03   +---+---+---+---+---+---+---+---+---+---+---+
 .      \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ /
 r02     +---+---+---+---+---+---+---+---+---+---+
 .        \ / \ / \ / \ / \ / \ / \ / \ / \ / \ /
 r01       +---+---+---+---+---+---+---+---+---+
 .          \ / \ / \ / \ / \ / \ / \ / \ / \ /
 r00         e---+---+---+---O---+---+---+---b
 .          / \ / \ / \ / \ / \ / \ / \ / \ / \
 r-1       +---+---+---+---+---+---+---+---+---+
 .        / \ / \ / \ / \ / \ / \ / \ / \ / \ / \
 r-2     +---+---+---+---+---+---+---+---+---+---+
 .      / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \
 r-3   +---+---+---+---+---+---+---+---+---+---+---+
 .    / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \
 r-4 F---+---+---+---f---+---+---+---a---+---+---+---B
 .                    \ / \ / \ / \ /
 r-5                   +---+---+---+
 .                      \ / \ / \ /
 r-6                     +---+---+
 .                        \ / \ /
 r-7                       +---+
 .                          \ /
 r-8                         A
 .
 c    -11 -9-8-7-6-5-4-3-2-1 0 1 2 3 4 5 6 7 8 9 10  12
 .  -12 -10                                        11
 */    

/* 迷你跳棋的视图棋盘及坐标
 .
 r06                   D
 .                    / \
 r05                 +---+
 .                  / \ / \
 r04               +---+---+
 .                / \ / \ / \
 r03 E---+---+---d---+---+---c---+---+---C
 .    \ / \ / \ / \ / \ / \ / \ / \ / \ /
 r02   +---+---+---+---+---+---+---+---+
 .      \ / \ / \ / \ / \ / \ / \ / \ /
 r01     +---+---+---+---+---+---+---+
 .        \ / \ / \ / \ / \ / \ / \ /
 r00       e---+---+---O---+---+---b
 .        / \ / \ / \ / \ / \ / \ / \
 r-1     +---+---+---+---+---+---+---+
 .      / \ / \ / \ / \ / \ / \ / \ / \
 r-2   +---+---+---+---+---+---+---+---+
 .    / \ / \ / \ / \ / \ / \ / \ / \ / \
 r-3 F---+---+---f---+---+---a---+---+---B
 .                \ / \ / \ /
 r-4               +---+---+
 .                  \ / \ /
 r-5                 +---+
 .                    \ /
 r-6                   A
 .
 c  -9-8-7-6-5-4-3-2-1 0 1 2 3 4 5 6 7 8 9
 */

#ifndef Jumball_JumballEngine_h
#define Jumball_JumballEngine_h

#ifdef __cplusplus
extern "C" {
#endif
   
    // 跳棋内存棋盘
    typedef char JumballBoard[32*32];
    
    // 迷你跳棋内存棋盘
    // typedef char MiniJumballBoard[32*32];
    
    // 跳棋（迷你跳棋）六个方位
    typedef enum _JumballCorner
    {
        kJBECornerSouth,
        kJBECornerSouthEast,
        kJBECornerNorthEast,
        kJBECornerNorth,
        kJBECornerNorthWest,
        kJBECornerSouthWest,
        kJBECornerMax,
    } JumballCorner;
    
    // 得到对角corner
#define JBEDiagonalCorner(corner) ((JumballCorner)(((corner) + 3) % kJBECornerMax))
    // 得到各个方位的名称
    extern const char* kJBECornerName[kJBECornerMax];
    // 每方的棋子数
    extern const int kJBEPieceCount;
    // 代表各方棋子的字母
    extern const char kJBECornerCharacter[kJBECornerMax];
    // Home Corner 索引
    extern const short kJBEHomeCornerIndex[kJBECornerMax];
    extern const short kJBEMiniHomeCornerIndex[kJBECornerMax];
    
    // 跳棋（迷你跳棋）六个方向
    typedef enum _JumballDirection
    {
        kJBEDirectionEast,
        kJBEDirectionNorthEast,
        kJBEDirectionNorthWest,
        kJBEDirectionWest,
        kJBEDirectionSouthWest,
        kJBEDirectionSouthEast,
        kJBEDirectionMax,
    } JumballDirection;
    
    // 跳棋（迷你跳棋）走子步长
    // 与 JumballDirection 中定义的方向对应
    extern const int kJBEUnitStep[kJBEDirectionMax];
    
    // 棋子移动
    typedef int JumballMove;
#define JBEGetFrom(move) ((move) >> 16)
#define JBEGetTo(move)  ((move) & 0xFFFF)
#define JBEMakeMove(from, to) (((from) << 16 ) + (0xFFFF & (to)))
    
    // 走子规则设置
    typedef unsigned int JumballRule;
    typedef enum _JBEStepType
    {
        kJBEScroll         = 0x1,        // () ( )                        =>      ( ) ()
        kJBEShortJump      = 0x1 << 1,   // () () ( )                    =>      ( ) () ()
        kJBELongJump       = 0x1 << 2,   // () ( ) () ( ) ( )            =>      ( ) ( ) () ( ) ()
        kJBELongLongJump   = 0x1 << 3,   // () ( ) ( ) () ( ) ( ) ( )    =>      ( ) ( ) ( ) () ( ) ( ) ()
    } JBEStepType;
    
    // 棋子id表
    extern const short* kJBEPieceIdTables[kJBECornerMax];
    extern const short* kJBEMiniPieceIdTables[kJBECornerMax];
    
    // 跳棋布尔棋盘
    static const JumballBoard kJBEBoolBoard =
    {
        // 8个空行
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        // 17个棋子行
        // column 的索引值
        //0         4     6     8  9        12       15 16          20 21       24          28          32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,
        
        0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
        
        0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        // 7个空行
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    };
    
    // 迷你跳棋布尔棋盘
    static const JumballBoard kJBEMiniBoolBoard =
    {
        // 10个空行
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        // 13个棋子行
        // column 的索引值
        //0         4     6     8  9        12       15 16          20 21       24          28          32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        // 9个空行
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    };
    
    // 摆棋子
    void JBEInitCorner(JumballBoard board, JumballCorner corner, const bool mini);
    
    // 内存索引转视图棋盘行列
    /**
     * 返回值表明行列值是否可靠(输入参数index是否在0~1024范围内)
     */
    bool JBEIndexToRowColumn(short index, int* row, int* column);
    
    // 视图棋盘行列转内存索引
    /**
     * 负值表示行列值无效(由行列值计算出的内存索引在0~1024之外)
     */
    short JBERowColumnToIndex(int row, int column);
    
    // 获取两点之间的方向
    JumballDirection JBEDirectionByRowColumn(int from_row, int from_column, int to_row, int to_column);
    
    // 走子规则
    /**
     * 返回值表明：从 from 能否一步到达 to，并与 to 和 from to之间的棋子有关系
     * from所在的位置可以有或者无棋子，to所在必须是空位
     */
    bool JBEOneStepBetween(const JumballBoard board, short from, short to, JumballRule rule, const bool mini);
    
    // 用于局面评估的所有10颗棋子，最远最近距离平方和
    int JBEMinSumSquareDistance(const bool mini);
    int JBEMaxSumSquareDistance(const bool mini);
    int JBESumSquareDistance(JumballCorner to_coner, short *indexes, int piece_count, const bool mini);
    
#ifdef __cplusplus
}
#endif

#endif
